---
title: "EDS 223 Week 4"
author: "Haylee Oyler"
format: html
editor: visual
execute:
  warning: false
  message: false
editor_options: 
  chunk_output_type: console
---

### Load packages
```{r}
library(terra) # raster handling
library(tidyverse)
library(tmap) # map making
library(kableExtra) # table formatting
library(spData) # spatial data
library(spDataLarge) # spatial data
library(geodata) # spatial data
```

# 2. Raster objects
```{r}
zion_elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))
zion_land <- rast(system.file("raster/nlcd.tif", package = "spDataLarge"))

```

```{r}
tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)")

tm_shape(zion_land) +
  tm_raster(title = "Land cover")
```

```{r}
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge"))

nlyr(landsat) # test number of layers in raster object
```

```{r}
tm_shape(landsat3) +
  tm_raster()
```
Maps each of our layers like a facet plot, each one shows a different layer of the electromagnetic spectrum. 4 matrices 
```{r}
landsat3 <- subset(landsat, "landsat_3")
```

```{r}
global(zion_elevation, mean)
freq(zion_land)
```

## Indexing

```{r}
# zion_elevation[1,1] <- 0 # like a regular matrix
zion_elevation[1] # gives the same value as the above command, shows first cell

# landsat[1] <- 0
```


```{r}
test_raster <- zion_elevation
test_raster[test_raster < 20] <- NA
```
[Can also update the value of the matrix using indexing like this

## Spatial subsetting
```{r}
point <- matrix(c(-113, 37.5), ncol = 2)

terra::extract(zion_elevation, point)
```

```{r}
clip <- rast(xmin = -113.3, xmax = -113, ymin = 37.2, ymax = 37.9,
             resolution = 0.3,
             vals = 1)

zion_clip <- zion_elevation[clip, drop = FALSE] 
# by default it drops the geometries, need to set it equal to false
```

```{r}
tm_shape(zion_elevation) +
  tm_raster()

tm_shape(zion_clip) +
  tm_raster()
```

```{r}
# Create mask
rmask <- zion_elevation
rmask[rmask <2000] <- NA

# Bracket subsetting
masked1 <- zion_elevation[rmask, drop = FALSE]

# Using terra
masked2 <- terra::mask(zion_elevation, rmask)
```

```{r}
map1 <- tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "original")

map2 <- tm_shape(masked1) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "bracket subsetting")

map3 <- tm_shape(masked2) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "mask()")

tmap_arrange(map1, map2, map3, nrow = 1) 
```

# 4. Map Algebra
```{r}
rcl <- matrix(c(1000, 1500, 1,
                1500, 2000, 2,
                2000, 2500, 3, 
                2500, 3000, 4),
              ncol = 3, byrow = TRUE)

reclassified <- terra::classify(zion_elevation, rcl = rcl)
values(reclassified) <- as.factor(values(reclassified))
```

```{r}
map1 <- tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "original")

map2 <- tm_shape(reclassified) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "reclassified")

tmap_arrange(map1, map2, nrow = 1) 
```

```{r}
ndvi_fun <- function(nir, red) {
  (nir - red)/(nir + red) 
}

# local operation across multiple layers
# NIR = 4
# RED = 3
ndvi_rast <- terra::lapp(landsat[[c(4,3)]], fun = ndvi_fun)

tm_shape(ndvi_rast) +
  tm_raster()
```

```{r}
elevation_focal <- focal(zion_elevation,
      w = matrix(1, nrow = 9, ncol = 9),
      fun = min)
# neighborhood of cells going to be used to update cell values 
```

```{r}
map1 <- tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "original")

map2 <- tm_shape(elevation_focal) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "aggregated")

tmap_arrange(map1, map2, nrow = 1) 
```
Goes through, removes outliers, smooths and makes things more homogeneous 

```{r}
terra::zonal(zion_elevation, reclassified, fun = mean) # mean value within groups
```

```{r}
terra::global(zion_elevation, mean) # mean elevation across whole park
```

# Changing extent, origin, and resolution

## Extent
```{r}
extend <- terra::extend(zion_elevation, c(1, 200))

zion_elevation + extend # extents dont match, doesn't have the same number of grid cells

extend2 <- terra::extend(zion_elevation, extend)

extend + extend2 # they match
```

## Origin
Point in lower left corner, check btwn rasters to see if they're in the same place
```{r}
origin(zion_elevation)
```

## Resolution
```{r}
zion_elevation_coarse <-  aggregate(zion_elevation, 
                                    fact = 5, # scale at which youre gonna aggregate
                                    fun = mean)
```

```{r}
# disaggregate the aggregated raster
zion_elevation_disagg <- disagg(zion_elevation_coarse, fact = 5, method = "bilinear")

# check whether the disaggregated version matches the original
if(identical(zion_elevation, zion_elevation_disagg)){
  print("disaggregated data matches original")
} else {
  warning("disaggregated data does not match original")
}
```

